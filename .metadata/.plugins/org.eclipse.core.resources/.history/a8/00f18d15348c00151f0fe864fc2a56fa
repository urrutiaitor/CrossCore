/*********************************************************************************

Copyright(c) 2012 Analog Devices, Inc. All Rights Reserved.

This software is proprietary and confidential.  By using this software you agree
to the terms of the associated Analog Devices License Agreement.

*********************************************************************************/
/*!
 * @file      AudioLoopback.c
 * @brief     Audio loopback example using AD1871 ADC and AD1854 DAC.
 * @version:  $Revision: 9599 $
 * @date:     $Date: 2012-06-26 02:46:24 -0400 (Tue, 26 Jun 2012) $
 *
 * @details
 *            This is the primary source file for audio loopback example using
 *            AD1871 Stereo Audio ADC and AD1854 Stereo Audio DAC drivers.
 *
 */

/*=============  I N C L U D E S   =============*/

/* Audio loopback example includes */
#include "AudioLoopback.h"

/* Managed drivers and/or services include */
#include "system/adi_initialize.h"
#include <filter.h>
#include <math.h>

#define PI 3.1415f

#define NUM_COEFFS 51
#define NUM_SAMPLES 8192

// MIKEL: Insert here your .h with your filter coefficients and define any global variables
// you might need
#include "filter1_fr32_hp.h"

/*=============  D A T A  =============*/
//#pragma align 4
segment ("sdram0")  fract32 guardado1[BUFFER_SIZE/8];
//#pragma align 4
segment ("sdram0")  fract32 guardado2[BUFFER_SIZE/8];
//#pragma align 4
segment ("sdram0")  fract32 salida1[BUFFER_SIZE/8];
//#pragma align 4
segment ("sdram0")  fract32 salida2[BUFFER_SIZE/8];

segment ("sdram0")  fract16 simplify1[sizeof(guardado1)];
segment ("sdram0") fract16 simplify2[sizeof(guardado1)];


//segment ("sdram0")  fract16 guardado1_fr16[BUFFER_SIZE/8];
//segment ("sdram0")  fract16 guardado2_fr16[BUFFER_SIZE/8];
//segment ("sdram0")  fract16 salida1_fr16[BUFFER_SIZE/8];
//segment ("sdram0")  fract16 salida2_fr16[BUFFER_SIZE/8];
int tabla_senos[8]={32767, 15000, 0, -15000, -32767, -15000, 0, 15000};

/* Handle to the AD1871 device instance */
static ADI_AD1871_HANDLE    hAd1871Adc;
/* Handle to the AD1854 device instance */
static ADI_AD1871_HANDLE    hAd1854Dac;

/* Memory required to handle an AD1871 device instance */
static uint8_t Ad1871AdcMemory[ADI_AD1871_MEMORY_SIZE];
/* Memory required to handle an AD1854 device instance */
static uint8_t Ad1854DacMemory[ADI_AD1854_MEMORY_SIZE];

/* Pointer to processed audio buffers */
static void		*pAdcBuf, *pDacBuf;

#define NUM_COEFFS 69
fir_state_fr32 state1;
fir_state_fr32 state2;
#pragma section("L1_data_b")
fract32 delay1[NUM_COEFFS+2];
#pragma section("L1_data_b")
fract32 delay2[NUM_COEFFS+2];


/*=============  L O C A L    F U N C T I O N S  =============*/

/* Opens and configures AD1871 ADC driver */
static uint32_t InitAd1871Adc(void);
/* Opens and configures AD1854 ADC driver */
static uint32_t InitAd1854Dac(void);

/* Audio data buffers */
#pragma align 4
segment ("sdram0") uint8_t RxAudioBuf1[BUFFER_SIZE];
segment ("sdram0") uint8_t RxAudioBuf2[BUFFER_SIZE];
segment ("sdram0") uint8_t TxAudioBuf1[BUFFER_SIZE];
segment ("sdram0") uint8_t TxAudioBuf2[BUFFER_SIZE];


/* IF (Callback mode) */
#if defined (ENABLE_CALLBACK)

/* Callback from AD1854 DAC driver */
static void Ad1854DacCallback(
    void        *AppHandle,
    uint32_t    Event,
    void        *pArg);

/* Callback from AD1871 ADC driver */
static void Ad1871AdcCallback(
    void        *AppHandle,
    uint32_t    Event,
    void        *pArg);

#endif /* ENABLE_CALLBACK */

/*=============  C O D E  =============*/

/* IF (Callback mode) */
#if defined (ENABLE_CALLBACK)

/*
 *  Callback from AD1854 DAC driver
 *
 * Parameters
 *  - [in]  AppHandle   Callback parameter supplied by application
 *  - [in]  Event       Callback event
 *  - [in]  pArg        Callback argument
 *
 * Returns  None
 *
 */
static void Ad1854DacCallback(
    void        *AppHandle,
    uint32_t    Event,
    void        *pArg)
{
    /* CASEOF (Event) */
    switch (Event)
    {
    	/* CASE (Buffer Processed) */
        case (ADI_AD1854_EVENT_BUFFER_PROCESSED):
            /* Update processed DAC buffer address */
            pDacBuf = pArg;
            break;
    }
}

/*
 *  Callback from AD1871 ADC driver
 *
 * Parameters
 *  - [in]  AppHandle   Callback parameter supplied by application
 *  - [in]  Event       Callback event
 *  - [in]  pArg        Callback argument
 *
 * Returns  None
 *
 */
static void Ad1871AdcCallback(
    void        *AppHandle,
    uint32_t    Event,
    void        *pArg)
{
    /* CASEOF (Event) */
    switch (Event)
    {
    	/* CASE (Buffer Processed) */
        case (ADI_AD1871_EVENT_BUFFER_PROCESSED):
            /* Update processed ADC buffer address */
            pAdcBuf = pArg;
            break;
    }
}

#endif /* ENABLE_CALLBACK */

/*********************************************************************
*
*   Function:   main
*
*********************************************************************/
void main (void)
{

	/* Return code */
	uint32_t	Result;
    unsigned int *ptr_int32;
    unsigned int k;
    unsigned int i;
    int contador_tramas = 0;
    volatile unsigned int *ptr_test = 0x30000;

/* IF (Non-blocking mode) */
#if !defined (ENABLE_CALLBACK)
    /* Flag to register processed buffer available status */
    bool    bIsBufAvailable = false;
#endif /* ENABLE_CALLBACK not defined */

/* IF (Application Time-out enabled) */
#if defined (ENABLE_APP_TIME_OUT)
    /* Time-out counter to make sure the example exits */
    volatile uint32_t   AppTimeOutCount = TIME_OUT_VAL;
#endif /* ENABLE_APP_TIME_OUT */

    /* Initialize managed drivers and/or services */
	adi_initComponents();

	/* Filter initializations */
	// MIKEL: Insert ere any filter initialization you might need

	int counter;
	for(counter = 0; counter < NUM_COEFFS; counter++) {
		delay1[counter] = 0;
		delay2[counter] = 0;
	}

	//fir_init(state1, filter1_fr32, delay1, NUM_COEFFS, 0);
	fir_init(state2, filter1_fr32, delay2, NUM_COEFFS, 0);


	/* Initialize buffer pointers */
    pAdcBuf = NULL;
    pDacBuf = NULL;

    *ptr_test = 0xFF;


    /* Clear audio input and output buffers */
    memset(RxAudioBuf1, 0, BUFFER_SIZE);
    memset(RxAudioBuf2, 0, BUFFER_SIZE);
    memset(TxAudioBuf1, 0, BUFFER_SIZE);
    memset(TxAudioBuf2, 0, BUFFER_SIZE);

    /* Initialize power service */
    Result = (uint32_t) adi_pwr_Init (PROC_CLOCK_IN, PROC_MAX_CORE_CLOCK, PROC_MAX_SYS_CLOCK, PROC_MIN_VCO_CLOCK);

    /* IF (Failure) */
    if (Result)
    {
    	DEBUG_MSG1 ("Failed to initialize Power service\n");
    }

    /* IF (Success) */
    if (Result == 0)
    {
    	/* Set the required core clock and system clock */
    	Result = (uint32_t) adi_pwr_SetFreq(PROC_REQ_CORE_CLOCK, PROC_REQ_SYS_CLOCK);

    	/* IF (Failure) */
    	if (Result)
    	{
    		DEBUG_MSG1 ("Failed to initialize Power service\n");
    	}
    }

    /* IF (Success) */
    if (Result == 0)
    {
    	/* Open and configure AD1871 ADC device instance */
    	Result = InitAd1871Adc ();
    }

    /* IF (Success) */
    if (Result == 0)
    {
        /* Open and configure AD1854 DAC device instance */
        Result = InitAd1854Dac ();
    }

    /* IF (Success) */
    if (Result == 0)
    {
        /* Enable AD1854 DAC dataflow */
        Result = adi_ad1854_Enable (hAd1854Dac, true);

        /* IF (Failure) */
        if(Result)
        {
            DEBUG_MSG2("Failed to enable AD1854 DAC dataflow", Result);
        }
    }

    /* IF (Success) */
    if (Result == 0)
    {
        /* Enable AD1871 ADC dataflow */
        Result = adi_ad1871_Enable (hAd1871Adc, true);

        /* IF (Failure) */
        if(Result)
        {
            DEBUG_MSG2("Failed to enable AD1871 ADC dataflow", Result);
        }
    }

	/* IF (Success) */
    if (Result == 0)
    {

	/* IF (Application Time-out enabled) */
	#if defined (ENABLE_APP_TIME_OUT)
			/* Continue until time-out counter expires */
			while (AppTimeOutCount--)
	/* ELSE (Application does not time out) */
	#else
			while (1)
	#endif /* ENABLE_APP_TIME_OUT */

			{

	/* IF (Non-Blocking mode) */
	#if !defined (ENABLE_CALLBACK)

            /* Query AD1871 for processed buffer status */
            Result = (uint32_t) adi_ad1871_IsRxBufAvailable (hAd1871Adc, &bIsBufAvailable);

            /* IF (Failure) */
            if (Result)
            {
                DEBUG_MSG2("Failed to query AD1871 for processed buffer status", Result);
                break;
            }

            /* IF (AD1871 Buffer available) */
            if (bIsBufAvailable)
            {
                /* Get AD1871 processed buffer address */
                Result = (uint32_t) adi_ad1871_GetRxBuffer (hAd1871Adc, &pAdcBuf);

                /* IF (Failure) */
                if (Result)
                {
                    DEBUG_MSG2("Failed to get AD1871 processed buffer address", Result);
                    break;
                }
            }

            /* Query AD1854 for processed buffer status */
            Result = (uint32_t) adi_ad1854_IsTxBufAvailable (hAd1854Dac, &bIsBufAvailable);

            /* IF (Failure) */
            if (Result)
            {
                DEBUG_MSG2("Failed to query AD1854 for processed buffer status", Result);
                break;
            }

            /* IF (AD1854 Buffer available) */
            if (bIsBufAvailable)
            {
                /* Get AD1854 processed buffer address */
                Result = (uint32_t) adi_ad1854_GetTxBuffer (hAd1854Dac, &pDacBuf);

                /* IF (Failure) */
                if (Result)
                {
                    DEBUG_MSG2("Failed to get AD1854 processed buffer address", Result);
                    break;
                }
            }

#endif /* ENABLE_CALLBACK not defined */

            /* IF (Valid ADC and DAC buffer available) */
            if ((pAdcBuf != NULL) && (pDacBuf != NULL))
            {
                /* Copy ADC data buffer content to DAC buffer */
                //memcpy(pDacBuf, pAdcBuf, BUFFER_SIZE);

                ptr_int32 = (unsigned int *) pAdcBuf;


                /* Copy left and right to guardado arrays */
                for(k=0;k<BUFFER_SIZE/4;k+=2)
                {
                	guardado1[k/2]=((ptr_int32[k]<<8));
                	guardado2[k/2]=((ptr_int32[k+1]<<8));

                	// MIKEL: This is to test hardware and cables
                	//salida2[k/2]=guardado2[k/2];
                	//salida1[k/2]=guardado1[k/2];
                }

            	//MIKEL: Call here fir_fr32 to compute filter output for each block of 8192 samples taken
                //       at 48 kHz. Input is in guardado1 and guardado2. Outputs should be written in salida1 and
                //		 salida2.

                for (int counter = 0; counter < sizeof(guardado1); counter++) {
                	simplify1[counter] = guardado1[counter]>>16;
                	//simplify2[counter] = guardado2[counter]>>16;
                }
                //fir_fr32(guardado1, salida1, NUM_SAMPLES, &state1);
                //fir_fr32(guardado2, salida2, NUM_SAMPLES, &state2);
                ourFilter(simplify1, salida1, filter1_fr32);
                //ourFilter(simplify2, salida2, filter1_fr32);


                ptr_int32 = (unsigned int *) pDacBuf;

                /* Copy left and right to guardado arrays */
				for(k=0;k<BUFFER_SIZE/4;k+=2)
				{
					ptr_int32[k]=((int) salida1[k/2])>>8;
					ptr_int32[k+1]=((int) salida2[k/2])>>8;
				}

				if (contador_tramas==100)
				{
					contador_tramas++;
				}
				contador_tramas++;


                /* Re-submit ADC buffer */
                Result = adi_ad1871_SubmitRxBuffer(hAd1871Adc, pAdcBuf, BUFFER_SIZE);

                /* IF (Failure) */
                if(Result)
                {
                    DEBUG_MSG2("Failed to submit buffer to AD1871", Result);
                    break;
                }

                /* Re-submit DAC buffer */
                Result = adi_ad1854_SubmitTxBuffer(hAd1854Dac, pDacBuf, BUFFER_SIZE);

                /* IF (Failure) */
                if(Result)
                {
                    DEBUG_MSG2("Failed to submit buffer to AD1854", Result);
                    break;
                }

                /* Clear the buffer pointers */
                pAdcBuf = NULL;
                pDacBuf = NULL;
            }
        }
    }

    /* IF (Success) */
    if(Result == 0)
    {
    	/* Disable AD1854 DAC dataflow */
    	Result = adi_ad1854_Enable (hAd1854Dac, false);

    	/* IF (Failure) */
    	if(Result)
    	{
    		DEBUG_MSG2("Failed to disable AD1854 DAC dataflow", Result);
    	}
    }

    /* IF (Success) */
    if(Result == 0)
    {
    	/* Disable AD1871 ADC dataflow */
    	Result = adi_ad1871_Enable (hAd1871Adc, false);

    	/* IF (Failure) */
    	if(Result)
    	{
    		DEBUG_MSG2("Failed to disable AD1871 ADC dataflow", Result);
    	}
    }

    /* IF (Success) */
    if(Result == 0)
    {
    	/* Close AD1854 DAC instance */
    	Result = adi_ad1854_Close (hAd1854Dac);

    	/* IF (Failure) */
    	if(Result)
    	{
    		DEBUG_MSG2("Failed to close AD1854 DAC instance", Result);
    	}
    }

    /* IF (Success) */
    if(Result == 0)
    {
    	/* Close AD1871 ADC instance */
    	Result = adi_ad1871_Close (hAd1871Adc);

    	/* IF (Failure) */
    	if(Result)
    	{
    		DEBUG_MSG2("Failed to close AD1871 ADC instance", Result);
    	}
    }

    /* IF (Success) */
    if (Result == 0)
    {
        printf ("All Done\n");
    }
    /* ELSE (Failure) */
    else
    {
        printf ("Failed\n");
    }
}

void ourFilter(fract16 input[], fract32 output[], fract16 response[]) {
	int nMax = sizeof(input);
	int kMax = sizeof(response);

	for (int n = 0; n < nMax + kMax - 2; n++) {
		for (int k = 0; k < kMax - 1; k++) {
			if ((n - k > 0) && (n - k <=kMax)) {
				output[n] = output[n] + (response[k]*input[n-k]);
			}
		}
	}
}

/*
 * Opens and initializes AD1854 DAC device instance.
 *
 * Parameters
 *  None
 *
 * Returns
 *  0 if success, other values for error
 *
 */
static uint32_t InitAd1854Dac (void)
{
    /* Return code */
    ADI_AD1854_RESULT   eResult;

    /* Open AD1854 instance */
    eResult = adi_ad1854_Open (AD1854_DEV_NUM,
                               &Ad1854DacMemory,
                               ADI_AD1854_MEMORY_SIZE,
                               &hAd1854Dac);

    /* IF (Failed) */
    if (eResult != ADI_AD1854_SUCCESS)
    {
        DEBUG_MSG2("Failed to open AD1854 DAC instance", eResult);
        return ((uint32_t) eResult);
    }

    /* Reset AD1854 */
    eResult = adi_ad1854_HwReset (hAd1854Dac, AD1854_RESET_PORT, AD1854_RESET_PIN);

    /* IF (Failed) */
    if (eResult != ADI_AD1854_SUCCESS)
    {
    	DEBUG_MSG2("Failed to reset AD1854 DAC instance", eResult);
        return ((uint32_t) eResult);
    }

    /* Set SPORT device number, External clock source (SPORT as Slave) */
    eResult = adi_ad1854_SetSportDevice (hAd1854Dac, AD1854_SPORT_DEV_NUM, true);

    /* IF (Failed) */
    if (eResult != ADI_AD1854_SUCCESS)
    {
        DEBUG_MSG2("Failed to set AD1854 DAC SPORT device instance", eResult);
        return ((uint32_t) eResult);
    }

/* IF (Callback mode) */
#if defined (ENABLE_CALLBACK)

    /* Set AD1854 callback function */
    eResult = adi_ad1854_SetCallback (hAd1854Dac, Ad1854DacCallback, NULL);

    /* IF (Failed) */
    if (eResult != ADI_AD1854_SUCCESS)
    {
    	DEBUG_MSG2("Failed to set AD1854 Callback function", eResult);
        return ((uint32_t) eResult);
    }

#endif /* ENABLE_CALLBACK */

    /* Submit Audio buffer 1 to AD1854 DAC */
    eResult = adi_ad1854_SubmitTxBuffer (hAd1854Dac, &TxAudioBuf1, BUFFER_SIZE);

    /* IF (Failed) */
    if (eResult != ADI_AD1854_SUCCESS)
    {
        DEBUG_MSG2("Failed to submit Audio buffer 1 to AD1854 DAC", eResult);
        return ((uint32_t) eResult);
    }

    /* Submit Audio buffer 2 to AD1854 DAC */
    eResult = adi_ad1854_SubmitTxBuffer (hAd1854Dac, &TxAudioBuf2, BUFFER_SIZE);

    /* IF (Failed) */
    if (eResult != ADI_AD1854_SUCCESS)
    {
        DEBUG_MSG2("Failed to submit Audio buffer 2 to AD1854 DAC", eResult);
    }

    /* Return */
    return ((uint32_t) eResult);
}

/*
 * Opens and initializes AD1871 ADC device instance.
 *
 * Parameters
 *  None
 *
 * Returns
 *  0 if success, other values for error
 *
 */
static uint32_t InitAd1871Adc (void)
{
    /* Return code */
    ADI_AD1871_RESULT   eResult;

    /* Open AD1871 instance */
    eResult = adi_ad1871_Open (AD1871_DEV_NUM,
                               &Ad1871AdcMemory,
                               ADI_AD1871_MEMORY_SIZE,
                               &hAd1871Adc);

    /* IF (Failed) */
    if (eResult != ADI_AD1871_SUCCESS)
    {
        DEBUG_MSG2("Failed to open AD1871 ADC instance", eResult);
        return ((uint32_t) eResult);
    }

    /* Reset AD1871 */
    eResult = adi_ad1871_HwReset (hAd1871Adc, AD1871_RESET_PORT, AD1871_RESET_PIN);

    /* IF (Failed) */
    if (eResult != ADI_AD1871_SUCCESS)
    {
    	DEBUG_MSG2("Failed to reset AD1871 ADC instance", eResult);
        return ((uint32_t) eResult);
    }

    /* Set SPORT device number, AD1871 as Master (SPORT as Slave) */
    eResult = adi_ad1871_SetSportDevice (hAd1871Adc, AD1871_SPORT_DEV_NUM, true);

    /* IF (Failed) */
    if (eResult != ADI_AD1871_SUCCESS)
    {
        DEBUG_MSG2("Failed to set AD1871 ADC SPORT device instance", eResult);
        return ((uint32_t) eResult);
    }

/* IF (Callback mode) */
#if defined (ENABLE_CALLBACK)

    /* Set AD1871 callback function */
    eResult = adi_ad1871_SetCallback (hAd1871Adc, Ad1871AdcCallback, NULL);

    /* IF (Failed) */
    if (eResult != ADI_AD1871_SUCCESS)
    {
    	DEBUG_MSG2("Failed to set AD1871 Callback function", eResult);
        return ((uint32_t) eResult);
    }

#endif /* ENABLE_CALLBACK */

    /* Submit Audio buffer 1 to AD1871 ADC */
    eResult = adi_ad1871_SubmitRxBuffer (hAd1871Adc, &RxAudioBuf1, BUFFER_SIZE);

    /* IF (Failed) */
    if (eResult != ADI_AD1871_SUCCESS)
    {
        DEBUG_MSG2("Failed to submit Audio buffer 1 to AD1871 ADC", eResult);
        return ((uint32_t) eResult);
    }

    /* Submit Audio buffer 2 to AD1871 ADC */
    eResult = adi_ad1871_SubmitRxBuffer (hAd1871Adc, &RxAudioBuf2, BUFFER_SIZE);

    /* IF (Failed) */
    if (eResult != ADI_AD1871_SUCCESS)
    {
        DEBUG_MSG2("Failed to submit Audio buffer 2 to AD1871 ADC", eResult);
    }

    /* Return */
    return ((uint32_t) eResult);
}

/*****/

/*
** EOF
*/
